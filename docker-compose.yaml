# Docker compose file for running the LabCAS containers:
# labcas-backend
# labcas-ui
# nginx proxy

# Required env variables: 
# LABCAS_NETWORK: pre-existing Docker network that connects all these containers
#                 when running on AWS with JPL security, it must be configured to
#                 connect to the internet
# LABCAS_PORT: host port that is proxied to Nginx port 80
# SOLR_PORT: port where Solr is available for local publishing operations
# WMGR_PORT: port where the OODT Workflow Manager is available for local publishing operations
# LABCAS_CONSORTIUM: name of consortium specific configuration
# LABCAS_INSTALL: location of LabCAS installation

# Required configuration files:
# $LABCAS_CONFIG/$LABCAS_CONSORTIUM/labcas.properties
# $LABCAS_CONFIG/$LABCAS_CONSORTIUM/labcas_certs
# $LABCAS_CONFIG/$LABCAS_CONSORTIUM/ui.env

version: '3.3'

networks: 
  default:
    external: 
      name: ${LABCAS_NETWORK}

services:

   nginx:
     image: nginx
     #command: [nginx-debug, '-g', 'daemon off;']
     ports:
        - "${LABCAS_PORT}:80"
     volumes:
        # override default nginx configuration
        - ./nginx/conf/nginx_proxy.conf:/etc/nginx/conf.d/default.conf:ro
        # static web content
        - $LABCAS_INSTALL/static:/usr/local/labcas/static
     depends_on:
       - labcas-backend 
       - labcas-ui
       
   labcas-ui2:
      image: edrn/labcas-ui2
      build:
        context: ./labcas-ui2
      # custom configuration to use '/labcas-ui/' root URL
      volumes:
        - ./labcas-ui2/nginx.conf:/etc/nginx/conf.d/default.conf
        - ./configs/${LABCAS_CONSORTIUM}/config/environment.cfg:/usr/share/nginx/html/assets/conf/environment.cfg
        - $LABCAS_INSTALL/thumbnails:/usr/share/nginx/html/assets/thumbnails
      # ports:
      #  - "8081:80"

   labcas-backend: 
      image: edrn/labcas-backend:${LABCAS_BK_VERSION-latest}
      build:
        context: ./labcas-backend
      environment:
        AWS_REGION: us-west-2
        AWS_S3_READONLY_PROFILE: saml
        # FIXME: set to 20
        AWS_DOWNLOAD_URL_EXPIRATION_TIME_SECS: 300
        S3_BUCKET: 
      volumes: 
        - $LABCAS_INSTALL/staging:/usr/local/labcas/staging
        - $LABCAS_INSTALL/archive:/usr/local/labcas/archive
        - $LABCAS_INSTALL/home/solr-index:/usr/local/labcas/home/solr-index
        - $LABCAS_INSTALL/home/products:/usr/local/labcas/home/products
        - $LABCAS_INSTALL/static:/usr/local/labcas/static
        - $LABCAS_INSTALL/config/labcas.properties:/root/labcas.properties
        - $LABCAS_CERTS:/root/certs
        - $HOME/.aws/credentials:/root/.aws/credentials
      ports:  
        - "${SOLR_PORT}:8983"
        - "${WMGR_PORT}:9001"
        
   labcas-ui: 
      image: edrn/labcas-ui:${LABCAS_UI_VERSION-latest}
      build: ./labcas-ui
      env_file: $LABCAS_INSTALL/config/ui.env
      volumes: 
        - $LABCAS_INSTALL/staging:/usr/local/labcas/backend/staging
        - $LABCAS_CERTS:/app/certs
        - persistence:/app/persistence
      depends_on:
        - labcas-backend  
      healthcheck:
            test: ["CMD", "curl", "--fail", "http://labcas-ui:6543"]
            interval: 5m
            timeout: 10s
            retries: 3
            
   labcas-publish-api:
     image: edrn/labcas-publish-api:${LABCAS_PUBLISH_API_VERSION-latest}
     build:
       context: ./labcas-publish-api
     # override entrypoint to connect to the Solr server on this network
     entrypoint: python -u api.py solr_url=http://labcas-backend:8983/solr/ s3_bucket=${S3_BUCKET}
     # expose the publish API to clients on the external host
     ports:
       - "${PUBLISH_API_PORT}:5000"
     environment:
       - LABCAS_INSTALL=/usr/local/labcas
     volumes:
       - $LABCAS_INSTALL/archive:/usr/local/labcas/archive
       - $HOME/.aws/credentials:/root/.aws/credentials     
       # for generating and saving thumbnails
       - $LABCAS_INSTALL/thumbnails:/usr/local/labcas/thumbnails


volumes: 
  persistence: 
